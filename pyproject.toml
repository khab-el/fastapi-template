[tool.poetry]
name = "core"
version = "0.1.0"
description = "Marketplace Entertainment Service"
authors = ["Eldar Khabibulin <exabib@gmail.com>"]
readme = "README.md"
repository = "https://github.com/khab-el/fastapi-template/"
packages = [{include = "src"}]

[tool.poetry.dependencies]
python = "^3.11"
alembic = "^1.12.0"
backoff = "^2.2.1"
click = "^8.1.7"
cx-oracle-async = "^0.3.3"
fastapi = "^0.101.1"
greenlet = "^2.0.2"
gunicorn = "^21.2.0"
httpx = "0.23.3"
itsdangerous = "^2.1.2"
multimethod = "^1.9.1"
pandas = "^2.1.4"
prometheus-client = "^0.17.1"
psycopg2-binary = "^2.9.7"
pydantic = {extras = ["dotenv"], version = "^2.3.0"}
pydantic-settings = "^2.0.3"
sentry-sdk = "^1.29.2"
sqladmin = "^0.14.1"
sqlalchemy = {extras = ["postgresql-asyncpg"], version = "^2.0.20"}
uvicorn = {extras = ["standart"], version = "^0.23.2"}

[tool.poetry.group.dev.dependencies]
add-trailing-comma = "^3.0.1"
aioresponses = "~0.7.3"
autoflake = "^2.0.1"
bandit = "^1.7.4"
black = { extras = ['d'], version = "^22.12.0" }
flake8 = {extras = ["pyflakes"], version = "^6.1.0"}
flake8-blind-except = "^0.2.1"
flake8-bugbear = "^23.1.20"
flake8-builtins = "^2.1.0"
flake8-coding = "^1.3"
flake8-commas = "^2.0"
flake8-comprehensions = "^3.10"
flake8-debugger = "^4.1"
flake8-docstrings = "~1.7.0"
flake8-implicit-str-concat = "^0.3.0"
flake8-isort = "^6.0.0"
flake8-module-name = "^0.2.0"
flake8-mypy = "^17.8.0"
flake8-pep3101 = "^2.0"
flake8-print = "^5.0"
flake8-pyproject = "^1.2.2"
flake8-pytest = "^1.4"
flake8-simplify = "^0.19.3"
flake8-string-format = "^0.3.0"
flake8-todo = "^0.7"
httpx = "~0.23.3"
isort = { extras = ["colors"], version = "^5.12.0" }
mypy = "~1.4.1"
myst-parser = "~1.0.0"
nplusone = "^1.0"
Pallets-Sphinx-Themes = "~2.0.2"
pep8-naming = "^0.13"
pre-commit = "^3.0.2"
pydocstyle = "^6.3.0"
pylint = "^2.15"
pytest = "~7.4.0"
pytest-asyncio = "~0.21.0"
pytest-cov = "~4.0.0"
pytest-deadfixtures = "^2.2"
pytest-picked = "^0.4.4"
pytest-randomly = "^3.4"
pytest-rerunfailures = "^11.1.2"
pyupgrade = "^3.3.1"
requests = "~2.28.2"
Sphinx = "~5.3.0"
sphinx-autodoc-typehints = "^1.11"
sphinxcontrib-napoleon = "^0.7.0"
sqlalchemy = {extras = ["mypy"], version = "^2.0.20"}
types-docutils = "^0.19.1.4"
types-pyopenssl = "^23.0.0.3"
types-python-dateutil = "^2.8.19.7"
types-requests = "^2.28.11.13"
types-setuptools = "^67.3.0.1"
types-six = "^1.16.21.4"
types-urllib3 = "^1.26.25.6"
xenon = "^0.9.0"
yamllint = "^1.25"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
core = 'src.cli:cli'


[tool.black]
# https://github.com/psf/black
target-version = ["py311"]
line-length = 120
color = true

exclude = '''
/(
    \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
    | env
    | venv
    | .venv
)/
'''

[tool.isort]
# https://github.com/timothycrosley/isort/
py_version = 311

known_typing = ["typing", "types", "typing_extensions", "mypy", "mypy_extensions"]
sections = ["FUTURE", "TYPING", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "MAIN", "LOCALFOLDER"]
default_section = "FIRSTPARTY"
known_main = ["src", "tests"]
skip = ["__init__.py"]
include_trailing_comma = true
profile = "black"
multi_line_output = 3
indent = 4
color_output = true


[tool.autoflake]
# return error code if changes are needed
check = false
# make changes to files instead of printing diffs
in-place = true
# drill down directories recursively
recursive = true
# exclude file/directory names that match these comma-separated globs
exclude = ".venv,venv,migrations"
# by default, only unused standard library imports are removed; specify a comma-separated list of additional
# modules/packages
#imports = "<IMPORTS>"
# expand wildcard star imports with undefined names; this only triggers if there is only one star import in
# the file; this is skipped if there are any uses of `__all__` or `del` in the file
expand-star-imports = false
# remove all unused imports (not just those from the standard library)
remove-all-unused-imports = true
# exclude __init__.py when removing unused imports
ignore-init-module-imports = true
# remove all duplicate keys in objects
remove-duplicate-keys = true
# remove unused variables
remove-unused-variables = false
# ignore all pass statements
ignore-pass-statements = false
# ignore pass statements after a newline ending on '"""'
ignore-pass-after-docstring = true


[tool.mypy]
# https://mypy.readthedocs.io/en/latest/config_file.html#using-a-pyproject-toml-file
python_version = 3.11
pretty = true
show_traceback = true
color_output = true
exclude = [
    "config/gunicorn.py"
]
plugins = [
  "pydantic.mypy",
  "sqlalchemy.ext.mypy.plugin"
]

allow_redefinition = false
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
ignore_missing_imports = true
implicit_reexport = false
no_implicit_optional = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
strict_equality = true
strict_optional = true
warn_no_return = true
warn_redundant_casts = true
warn_unreachable = true
warn_unused_configs = true


[[tool.mypy.overrides]]
module = [
    "tests.*",
    "gunicorn.*",
]
ignore_errors = true


[tool.flake8]
max-complexity = 6
statistics = true
max-line-length = 120
doctests = true
ignore = ["N999", "D100", "D101", "D104", "D106", "D401", "N999", "W503", "W504", "Q003", "B902", "P101", "P103", "N818",
    "E203", "E731", "B017", "SIM114", "I100", "I202", "I004"
]
no-accept-encodings = true
exclude = ["*/migrations/*"]
# Flake plugins:
accept-encodings = "utf-8"

[tool.coverage.run]
branch = true
omit = [
    "*/migrations/*.py",
    "src/config/gunicorn.py",
    "src/config/application.py",
    "src/__main__.py",
]

[tool.coverage.report]
exclude_lines = ["pragma: no cover", "if TYPE_CHECKING:", "if t.TYPE_CHECKING:", 'if __name__ == "__main__":']

[tool.doc8]
ignore_path = ["docs/_build"]
max_line_length = 120
sphinx = true

[tool.pylint.messages_control]
disable = "C0103,C0114,C0115,W0613"
confidence = "HIGH"
